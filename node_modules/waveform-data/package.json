{
  "name": "waveform-data",
  "version": "1.1.3",
  "description": "Audio Waveform Data Manipulation API â€“ resample, offset and segment waveform data in JavaScript.",
  "main": "waveform-data.js",
  "homepage": "https://github.com/bbcrd/waveform-data.js",
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "npm run test-node && npm run test-browser-ci && npm run code-coverage",
    "test-node": "mocha --reporter dot test/unit/*",
    "code-coverage": "mocha --require blanket --reporter html-cov test/unit/* > dist/code-coverage.html",
    "test-browser": "grunt karma:unit",
    "test-browser-ci": "grunt test:ci",
    "build": "npm run build-browser",
    "build-browser": "browserify -r ./waveform-data.js -s WaveformData > dist/waveform-data.js && grunt uglify"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/bbcrd/waveform-data.js.git"
  },
  "keywords": [
    "webaudio",
    "waveform",
    "audio",
    "visualisation"
  ],
  "author": {
    "name": "Thomas Parisot",
    "email": "thomas.parisot@bbc.co.uk"
  },
  "license": "LGPL-3.0",
  "bugs": {
    "url": "https://github.com/bbcrd/waveform-data.js/issues"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "~0.6.2",
    "grunt-contrib-uglify": "~0.2.2",
    "grunt": "~0.4.1",
    "grunt-contrib-watch": "~0.5.1",
    "grunt-karma": "~0.6.2",
    "karma-chrome-launcher": "~0.1.0",
    "karma-firefox-launcher": "~0.1.0",
    "karma-html2js-preprocessor": "~0.1.0",
    "karma-phantomjs-launcher": "~0.1.0",
    "grunt-jsdoc-md": "git+https://github.com/oncletom/grunt-jsdoc-md.git",
    "chai": "~1.8.1",
    "mocha": "~1.13.0",
    "karma-chai": "~0.0.2",
    "karma": "~0.10.2",
    "karma-mocha": "~0.1.0",
    "browserify": "~2.34.0",
    "karma-commonjs": "0.0.2",
    "karma-safari-launcher": "~0.1.1",
    "blanket": "~1.1.5",
    "karma-browserify": "0.0.5"
  },
  "readme": "# waveform-data.js [![Build Status](https://travis-ci.org/bbcrd/waveform-data.js.png?branch=master)](https://travis-ci.org/bbcrd/waveform-data.js)\n\n[![browser support](https://ci.testling.com/bbcrd/waveform-data.js.png)](https://ci.testling.com/bbcrd/waveform-data.js)\n\n**waveform-data.js** is a JavaScript library for creating __zoomable__,\n__browsable__ and __segmentable__ representations of audio waveforms.\n\n**waveform-data.js** is part of a [BBC R&D Browser-based audio waveform visualisation software family](http://waveform.prototyping.bbc.co.uk):\n\n- [audiowaveform](https://github.com/bbcrd/audiowaveform): C++ program that generates waveform data files from MP3 or WAV format audio.\n- [audio_waveform-ruby](https://github.com/bbcrd/audio_waveform-ruby): A Ruby gem that can read and write waveform data files.\n- **waveform-data.js**: JavaScript library that provides access to precomputed waveform data files, or can generate waveform data using the Web Audio API.\n- [peaks.js](https://github.com/bbcrd/peaks.js): JavaScript UI component for interacting with waveforms.\n\nWe use these projects daily in applications such as\n[BBC Radio Archive](http://worldservice.prototyping.bbc.co.uk) and __browser editing and sharing__ tools for BBC content editors.\n\n![Example of what it helps to build](waveform-example.png)\n\n# Install\n\n## npm\n\nYou can use `npm` to install `waveform-data`, both for Node.js or your frontend needs:\n\n```bash\nnpm install --save waveform-data\n```\n\n## Bower Component\n\nIf you already use `bower` to manage your frontend dependencies, you can then install `waveform-data` with it:\n\n```bash\nbower install --save waveform-data\n```\n\n# Usage and Examples\n\nSimply add `waveform-data.min.js` in a `script` tag in your HTML page.\nAdditional and detailed examples are showcased below and in the [documentation pages](doc/README.md).\n\n```html\n<!DOCTYPE html>\n<html>\n<body>\n<script src=\"/path/to/waveform-data.min.js\"></script>\n<script>\nvar waveform = new WaveformData(...);\n</script>\n</body>\n</html>\n```\n\nYou can use any of`dist/waveform-data.min.js` or `dist/waveform-data.js` files.\nThey are delivered as UMD module so they can be used as:\n\n- Vanilla JavaScript (available as `window.WaveformData`)\n- RequireJS module (available as `define(['WaveformData'], function(WaveformData){ ... })`)\n- CommonJS module (available as `var WaveformData = require('waveform-data');`)\n\n## Receiving the data from an AJAX request\n\n```javascript\nvar xhr = new XMLHttpRequest();\n\n// .dat file generated by audiowaveform program\nxhr.responseType = \"arraybuffer\";\nxhr.open(\"GET\", \"http://example.com/waveforms/track.dat\");\nxhr.addEventListener(\"load\", function onResponse(progressEvent){\n  var waveform = WaveformData.create(progressEvent.target);\n\n  console.log(waveform.duration);\n});\nxhr.send();\n```\n\n## Drawing in canvas\n\n```javascript\nvar waveform = WaveformData.create(raw_data);\nvar interpolateHeight = function interpolateHeightGenerator (total_height){\n  var amplitude = 256;\n  return function interpolateHeight (size){\n    return total_height - ((size + 128) * total_height) / amplitude;\n  };\n};\nvar y = interpolateHeight(canvas.height);\nvar ctx = canvas.getContext();\nctx.beginPath();\n\n// from 0 to 100\nwaveform.min.forEach(function(val, x){\n  ctx.lineTo(x + 0.5, y(val) + 0.5);\n});\n\n// then looping back from 100 to 0\nwaveform.max.reverse().forEach(function(val, x){\n  ctx.lineTo((waveform.offset_length - x) + 0.5, y(val) + 0.5);\n});\n\nctx.closePath();\ncanvas.fillStroke();\n```\n\n## Drawing in D3\n\n```javascript\nvar waveform = WaveformData.create(raw_data);\nvar layout = d3.select(this).select(\"svg\");\nvar x = d3.scale.linear();\nvar y = d3.scale.linear();\nvar offsetX = 100;\n\nx.domain([0, waveform.adapter.length]).rangeRound([0, 1024]);\ny.domain([d3.min(waveform.min), d3.max(waveform.max)]).rangeRound([offsetX, -offsetX]);\n\nvar area = d3.svg.area()\n  .x(function(d, i){ return x(i) })\n  .y0(function(d, i){ return y(waveform.min[i]) })\n  .y1(function(d, i){ return y(d) });\n\ngraph.select(\"path\")\n  .datum(waveform.max)\n  .attr(\"transform\", function(){ return \"translate(0, \"+offsetX+\")\"; })\n  .attr(\"d\", area);\n```\n\n## In Node.js\n\nYou can use the library to both consume the data on the frontend and emitting them from a Node.js HTTP server, for example.\n\n```javascript\n// app.js\nvar WaveformData = require(\"waveform-data\");\nvar express = require(\"express\");\nvar app = express();\n\n// ...\n\napp.get(\"/waveforms/:id.json\", function(req, res){\n  var data = require(\"path/to/\"+ req.params.id +\".json\");\n\n  res.json(data);\n});\n```\n\nYou could even self-consume the data from another application:\n\n```javascript\n#!/usr/bin/env node\n// app/bin/cli-resampler.js\n// called like `./app/bin/cli-resampler.js --wid=1337`\n\nvar WaveformData = require(\"waveform-data\");\nvar request = require(\"request\");\nvar args = require(\"optimist\").argv;\n\nrequest.get(\"http://api.myapp.com/waveforms/\"+ arvg.wid +\".json\", function(err, response, body){\n  var resampled_waveform = WaveformData.create(body).resample(2000);\n\n  process.stdout.write(JSON.stringify({ min: resampled_waveform.min, max: resampled_waveform.max }));\n});\n```\n\n\n# Data format\n\nThe [file format](https://github.com/bbcrd/audiowaveform/blob/master/doc/DataFormat.md) used and consumed by `WaveformData` is documented as part of the [**audiowaveform** project](http://waveform.prototyping.bbc.co.uk).\n\nWe basically have **headers** containing:\n\n * the `version number` of the data format\n * the `number of bits` used to encode the waveform data points\n * the expected `length` of samples to render\n * the `sample rate` of the original audio file used to compute the data\n * the `samples per pixel` which specifies the time resolution of the waveform data\n\nThe body contains a *single range* of *minumum* and *maximum* audio peaks.\nWhich means if we have a `length` of 100, it means we have *200* elements in the body.\n\n[Waveform Data Format Documentation](https://github.com/bbcrd/audiowaveform/blob/master/doc/DataFormat.md)\n\n# JavaScript API\n\nThis section describes the `WaveformData` API.\n\n## `WaveformData`\n\nThis is the main object you use to interact with the waveform data. It helps you to:\n\n* access the whole dataset\n* iterate easily on an *offset* (visible subset of data, for example)\n* generate one or several **resampled views**, e.g., to display the waveform at different zoom levels\n* convert positions (in pixels, in seconds, in the offset)\n* create and manage segments of waveform data, e.g., to represent different music tracks, or speakers, etc.\n\n[`WaveformData` API Documentation](doc/WaveformData.md)\n\n## `WaveformDataSegment`\n\nEach segment of data is independent and can overlap other existing ones.\nSegments allow you to keep track of portions of sound you would be interested to highlight.\n\n[`WaveformDataSegment` API Documentation](doc/WaveformDataSegment.md)\n\n## `WaveformDataAdapter`\n\nThis interface provides a backend abstraction for a `WaveformData` instance.\nYou should not manipulate this data directly.\n\n[`WaveformDataArrayBufferAdapter` API Documentation](doc/WaveformDataArrayBufferAdapter.md)\n[`WaveformDataObjectAdapter` API Documentation](doc/WaveformDataObjectAdapter.md)\n\n# Browser Support\n\nAny browser supporting **ECMAScript 5** will be enough to use the library -\nthink [`Array.forEach`](http://kangax.github.io/es5-compat-table/#Array.prototype.forEach):\n\n * IE9+, Firefox Stable, Chrome Stable, Safari 6+ are fully supported;\n * IE10+ is required for the [TypedArray](http://caniuse.com/#feat=typedarrays) Adapter;\n * Firefox 23+ and Webkit/Blink browsers are required for the experimental [Web Audio](http://caniuse.com/#feat=audio-api) Builder.\n\n# Development\n\nTo develop the code, install [Node.js](http://nodejs.org/) and [npm](https://npmjs.org/). After obtaining the waveform-data.js source code, run `npm install` to install Node.js package dependencies.\n\n# Credits\n\nThis program contains code adapted from [Audacity](http://audacity.sourceforge.net/), used with permission.\n\n# License\n\nSee COPYING for details.\n\n# Contributing\n\nEvery contribution is welcomed, either it's code, idea or a *merci*!\n\n[Guidelines are provided](CONTRIBUTING.md) and every commit is tested against unit tests\nusing [Karma runner](http://karma-runner.github.io) and the [Chai assertion library](http://chaijs.com/).\n\n# Authors\n\nThis software was written by\n\n* [Thomas Parisot](https://github.com/oncletom), thomas.parisot at bbc.co.uk.\n\n## Copyright\n\nCopyright 2014 British Broadcasting Corporation\n",
  "readmeFilename": "README.md",
  "_id": "waveform-data@1.1.3",
  "dist": {
    "shasum": "28884adb258cf1f35ac388e243601dbc6edb10dd"
  },
  "_from": "waveform-data@",
  "_resolved": "https://registry.npmjs.org/waveform-data/-/waveform-data-1.1.3.tgz"
}
